[user]
	name = <my name>
	email = <my email>
[color]
	diff = auto
	status = auto
	branch = auto
	interactive = auto
[core]
	excludesfile = /<my homedir>/.gitignore
	editor = vi
	autocrlf = input
[apply]
	whitespace = nowarn
[format]
	pretty = %C(yellow)%h%Creset %s %C(red)(%an, %cr) %C(blue)%d%Creset
	tease = %C(yellow)%h%C(reset) %C(blue)%cd%C(reset) %s %C(red)%d%C(reset)
[github]
	user = <my handle>
	token = <my token>
[merge]
	tool = opendiff
	summary = true
[alias]
	b = branch
	d = diff
  f = fetch
	l = log
  p = push
	r = rebase
	s = status
	sh = show
	ci = commit
	co = checkout
	cob = checkout -b
	up = !git fetch origin && git rebase origin/master
	ir = !git rebase -i origin/master
	ff = !git merge --ff-only `git config branch.$(git current-branch).remote`/`git current-base-branch`
	ffr = !git save && git rebase && git pop
	type = cat-file -t
	dump = cat-file -p
	undo-last-commit = reset --soft HEAD^
	kill-last-commit = reset --hard HEAD^
	fix = commit --amend -C HEAD
	log-graph = log --all --graph --decorate
	who = shortlog -n -s --no-merges
	wip = !"git add -A; git ls-files --deleted -z | xargs -0 git rm; git commit -m \"wip\""
	unwip = !"git log -n 1 | grep -q -c wip && git reset HEAD~1"
	rb = !"git wip;git rebase origin/master;git unwip"
	save = stash save
	pop = stash pop
	outgoing = diff origin/master
	incoming = !"git fetch; git st"
	ls-committed = "diff-tree --no-commit-id --name-only -r"
	ls-untracked = "ls-files --other --exclude-standard"
	hist = log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short
	unstage = reset HEAD --
	review = "!git co -b $1-$2 upstream/qa; git pull "
	current-branch = !"git br | grep \"\\*\" | awk \"{print \\$2}\""
	current-base-repo = !"git config remote.$(git config branch.`git current-branch`.remote).url | cut -d: -f 2 | cut -d. -f 1"
	current-base-branch = !"git config branch.$(git current-branch).merge | awk -F / '{print $3}'"
	pr = !"open https://github.com/$(git current-base-repo)/pull/new/$(git current-base-branch)...$(git config github.user):$(git current-branch)"
	dont-rebase = !"git config --unset branch.`git current-branch`.rebase"
	use-rebase = !"git config branch.`git current-branch`.rebase true"
	fetch-all = remote update --prune
	prunable = !"git_prunable"
	brc = !"ruby -e '%x{git remote}.split.collect {|r| branches = %x{git branch -r | grep #{r}}.split; [branches.length, r, branches]}.sort.reverse.each {|p| puts \"#{p.first.to_s.rjust(2)} branches from #{p[1]}#{ARGV[1] == \"v\" ? \": #{p.last.join(\", \")}\" : \"\"}\"}'"
[branch]
	autosetuprebase = always
[push]
	default = current
